/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project1;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.SQLException;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Prince Millenio
 */
public class data extends javax.swing.JInternalFrame {

    /**
     * Creates new form data
     */
    public data() {
        initComponents();
        getData();
    }
    
    private void getData()
    {
        // menampilkan data dari database
        
        try 
                {
                    Connection conn =(Connection)Project1.connection.koneksiDB();
                    java.sql.Statement stm = conn.createStatement();
                    java.sql.ResultSet sql = stm.executeQuery("select aset_inventory_it.id_aset, aset_it.deskripsi, aset_inventory_it.stok_barang from aset_inventory_it join aset_it on aset_inventory_it.id_aset =aset_it.id_aset");
                    jTable1.setModel(DbUtils.resultSetToTableModel(sql));
                }
                catch (SQLException | HeadlessException e) 
                {
                }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbData = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        cmbData.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        cmbData.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Barang Inventory", "Barang Pegawai", "Pegawai" }));
        cmbData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDataActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Open Sans", 0, 11)); // NOI18N
        jLabel1.setText("Display data:");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setEnabled(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(33, 33, 33)
                        .addComponent(cmbData, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDataActionPerformed
        // TODO add your handling code here:
        int Index = cmbData.getSelectedIndex();
        
        switch (Index) {
            case 0 : 
                try 
                {
                    Connection conn =(Connection)Project1.connection.koneksiDB();
                    java.sql.Statement stm = conn.createStatement();
                    java.sql.ResultSet sql = stm.executeQuery("select aset_inventory_it.id_aset, aset_it.deskripsi, aset_inventory_it.stok_barang from aset_inventory_it join aset_it on aset_inventory_it.id_aset =aset_it.id_aset");
                    jTable1.setModel(DbUtils.resultSetToTableModel(sql));
                }
                catch (SQLException | HeadlessException e) 
                {
                }
                break;
            
            case 1:
                try 
                {
                    Connection conn =(Connection)Project1.connection.koneksiDB();
                    java.sql.Statement stm = conn.createStatement();
                    java.sql.ResultSet sql = stm.executeQuery("select aset_pegawai.kode_pinjam as 'Kode pinjam', pegawai.nama_depan as 'Nama depan', aset_it.deskripsi as 'Barang', aset_pegawai.tanggal_keluar, aset_pegawai.jumlah, COALESCE(aset_pegawai.tanggal_kembali, 'Belum kembali') as 'Tanggal Kembali' FROM aset_pegawai join pegawai on aset_pegawai.id_pegawai =pegawai.id_pegawai join aset_it on aset_pegawai.id_aset =aset_it.id_aset order by tanggal_keluar");
                    jTable1.setModel(DbUtils.resultSetToTableModel(sql));
//                    SELECT COALESCE(tanggal_kembali, 'Belum kembali') FROM aset_pegawai;
                }
                
                catch (SQLException | HeadlessException e) 
                {
                }
                 break;
                 
            case 2:
               try 
                {
                    Connection conn =(Connection)Project1.connection.koneksiDB();
                    java.sql.Statement stm = conn.createStatement();
                    java.sql.ResultSet sql = stm.executeQuery("select * from pegawai");
                    jTable1.setModel(DbUtils.resultSetToTableModel(sql));
                }
                catch (SQLException | HeadlessException e) 
                {
                }
                break;
        }
    }//GEN-LAST:event_cmbDataActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
